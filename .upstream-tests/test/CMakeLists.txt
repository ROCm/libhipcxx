# Modifications Copyright (c) 2024 Advanced Micro Devices, Inc.
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

macro(pythonize_bool var)
  if (${var})
    set(${var} True)
  else()
    set(${var} False)
  endif()
endmacro()

  
if (LIBHIPCXX_ENABLE_CUDA)
set(LIBHIPCXX_HIGHEST_COMPUTE_ARCH 90)

foreach (COMPUTE_ARCH ${LIBHIPCXX_COMPUTE_ARCHS})
  set(_compute_message "${_compute_message} sm_${COMPUTE_ARCH}")
  set(LIBHIPCXX_COMPUTE_ARCHS_STRING "${LIBHIPCXX_COMPUTE_ARCHS_STRING} ${COMPUTE_ARCH}")
endforeach ()

option(LIBHIPCXX_ENABLE_COMPUTE_FUTURE "Enable code generation for tests for compute_${LIBHIPCXX_HIGHEST_COMPUTE_ARCH}" OFF)
if (LIBHIPCXX_ENABLE_COMPUTE_FUTURE)
  set(_compute_message "${_compute_message} compute_${LIBHIPCXX_HIGHEST_COMPUTE_ARCH}")
endif ()

message(STATUS "Enabled CUDA architectures:${_compute_message}")

option(LIBHIPCXX_TEST_WITH_NVRTC
  "Test libcu++ with runtime compilation instead of offline compilation. Only runs device side tests."
  OFF)
endif()

if (LIBHIPCXX_TEST_WITH_NVRTC)
  if (${CMAKE_CXX_COMPILER_ID} STREQUAL "MSVC")
    message(FATAL_ERROR "NVRTC testing not supported on Windows. \
      Set LIBHIPCXX_TEST_WITH_NVRTC to OFF.")
  endif()

  set(LIBHIPCXX_GPU_COMPILER "${CMAKE_CURRENT_SOURCE_DIR}/../utils/nvidia/nvrtc/nvrtc.sh")
  set(LIBHIPCXX_GPU_COMPILER_ARG1 "${CMAKE_CUDA_COMPILER}")
else() # NOT LIBHIPCXX_TEST_WITH_NVRTC
  if (LIBHIPCXX_ENABLE_CUDA)
    set(LIBHIPCXX_FORCE_INCLUDE "-include ${CMAKE_CURRENT_SOURCE_DIR}/force_include_cuda.h")
    set(LIBHIPCXX_GPU_COMPILER "${CMAKE_CUDA_COMPILER}")
  elseif(LIBHIPCXX_ENABLE_HIP)
    set(LIBHIPCXX_FORCE_INCLUDE "-include ${CMAKE_CURRENT_SOURCE_DIR}/force_include_hip.h")
     #temporary workaround until we've found a way to configure hipcc with enable_language
    set(LIBHIPCXX_GPU_COMPILER ${HIP_HIPCC_EXECUTABLE})
    set(CMAKE_CUDA_HOST_COMPILER ${CMAKE_CXX_COMPILER})
    set(CMAKE_CUDA_COMPILER_ID "HIPCC")
  endif()
endif()

set(LIBHIPCXX_TEST_COMPILER_FLAGS
  "${LIBHIPCXX_TEST_COMPILER_FLAGS} \
  ${LIBHIPCXX_FORCE_INCLUDE} \
  -I${CMAKE_SOURCE_DIR}/include"
  CACHE INTERNAL "Flags for libcxx testing." FORCE)

if (${CMAKE_CUDA_COMPILER_ID} STREQUAL "NVCXX")
  set(LIBHIPCXX_TEST_COMPILER_FLAGS
    "${LIBHIPCXX_TEST_COMPILER_FLAGS} \
    -stdpar")
  set(LIBHIPCXX_TEST_LINKER_FLAGS
    "${LIBHIPCXX_TEST_LINKER_FLAGS} \
    -stdpar")
endif()

include(AddLLVM)

set(LIBHIPCXX_TARGET_INFO "libhipcxx.test.target_info.LocalTI" CACHE STRING
  "TargetInfo to use when setting up test environment.")
set(LIBHIPCXX_EXECUTOR "None" CACHE STRING
  "Executor to use when running tests.")

set(AUTO_GEN_COMMENT "## Autogenerated by libhipcxx configuration.\n# Do not edit!")

pythonize_bool(LIBHIPCXX_ENABLE_COMPUTE_FUTURE)

configure_lit_site_cfg(
  ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in
  ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg)

add_lit_testsuite(check-hipcxx
  "Running libhip++ tests"
  ${CMAKE_CURRENT_BINARY_DIR})

# Add test target for standalone headers
add_subdirectory(host_only)
